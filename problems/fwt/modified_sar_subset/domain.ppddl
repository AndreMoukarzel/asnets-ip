(define (domain search-and-rescue)
 (:requirements :adl :probabilistic-effects :fluents :mdp)
 (:types loc)
 (:predicates (at ?loc - loc)
              (connected ?locA - loc ?locB - loc)  ;; static
              (has-victim ?l - loc)
              (unknown ?l - loc)
              (loc-prob-low ?l - loc)   ;; static
              (loc-prob-med ?l - loc)   ;; static
              (loc-prob-high ?l - loc)  ;; static
              (victim-boarded)
              (vehicle-empty)

              ;; this is a useless predicate to ensure that junk actions at
              ;; bottom are instantiated
              (spam-in-a-can)
 )
 (:action move-slow-empty
  :parameters (?from - loc ?to - loc)
  :precondition (and (at ?from) (connected ?from ?to) (vehicle-empty))
  :effect (and
            (decrease (reward) 3)     ;; costs 4 time units
;            (increase (fuel-spent) 1) ;; uses  1 fuel unit
            (at ?to) (not (at ?from)))
 )
 (:action move-normal-empty
  :parameters (?from - loc ?to - loc)
  :precondition (and (at ?from) (connected ?from ?to) (vehicle-empty))
  :effect (and
            (decrease (reward) 1)       ;; costs 2 time units
;            (increase (fuel-spent) 3)   ;; uses  3 fuel units
            (probabilistic 0.95 (and (at ?to) (not (at ?from))))
          )
 )
 (:action move-fast-empty
  :parameters (?from - loc ?to - loc)
  :precondition (and (at ?from) (connected ?from ?to) (vehicle-empty))
  :effect (and
                                        ;; costs 1 time unit
;            (increase (fuel-spent) 9)   ;; uses  9 fuel units  
            (probabilistic 0.9 (and (at ?to) (not (at ?from))))
          )
 )
 (:action move-slow-loaded
  :parameters (?from - loc ?to - loc)
  :precondition (and (at ?from) (connected ?from ?to) (victim-boarded))
  :effect (and
            (decrease (reward) 5)     ;; costs 6 time units
;            (increase (fuel-spent) 2) ;; uses  2 fuel units
            (at ?to) (not (at ?from)))
 )
 (:action move-normal-loaded
  :parameters (?from - loc ?to - loc)
  :precondition (and (at ?from) (connected ?from ?to) (victim-boarded))
  :effect (and
            (decrease (reward) 2)     ;; costs 3 time units
;            (increase (fuel-spent) 6) ;; uses  6 fuel unit
            (probabilistic 0.95 (and (at ?to) (not (at ?from))))
          )
 )
 (:action move-fast-loaded
  :parameters (?from - loc ?to - loc)
  :precondition (and (at ?from) (connected ?from ?to) (victim-boarded))
  :effect (and
            (decrease (reward) 1)     ;; costs  2 time units
;            (increase (fuel-spent) 18);; uses  18 fuel units
            (probabilistic 0.9 (and (at ?to) (not (at ?from))))
          )
 )
 (:action explore
  :parameters (?l - loc)
  :precondition (and (at ?l) (unknown ?l))
  :effect (and (not (unknown ?l))
               (when (loc-prob-high ?l) (probabilistic 0.20 (has-victim ?l)))
               (when (loc-prob-med ?l)  (probabilistic 0.10 (has-victim ?l)))
               (when (loc-prob-low ?l)  (probabilistic 0.05 (has-victim ?l)))
          )
 )
 (:action board-victim
  :parameters (?l - loc)
  :precondition (and (at ?l) (has-victim ?l) (vehicle-empty))
  :effect (and (not (has-victim ?l)) (not (vehicle-empty)) (victim-boarded))
 )

 ;; these just make sure that static predicates get instantiated
 ;;
 ;; BUG: MDPSim does not instantiate static predicates when they aren't true
 ;; initially, and only appear as conditions in conditional effects (e.g.
 ;; loc-prob-* are all in this category for this problem)
 (:action junk-prob-high
          :parameters (?l - loc)
          :precondition (and (or (loc-prob-high ?l) (not (spam-in-a-can))))
          :effect (and (spam-in-a-can)))
 (:action junk-prob-high-neg
          :parameters (?l - loc)
          :precondition (and (or (not (loc-prob-high ?l)) (not (spam-in-a-can))))
          :effect (and (spam-in-a-can)))
 (:action junk-prob-med
          :parameters (?l - loc)
          :precondition (and (or (loc-prob-med ?l) (not (spam-in-a-can))))
          :effect (and (spam-in-a-can)))
 (:action junk-prob-med-neg
          :parameters (?l - loc)
          :precondition (and (or (not (loc-prob-med ?l)) (not (spam-in-a-can))))
          :effect (and (spam-in-a-can)))
 (:action junk-prob-low
          :parameters (?l - loc)
          :precondition (and (or (loc-prob-low ?l) (not (spam-in-a-can))))
          :effect (and (spam-in-a-can)))
 (:action junk-prob-low-neg
          :parameters (?l - loc)
          :precondition (and (or (not (loc-prob-low ?l)) (not (spam-in-a-can))))
          :effect (and (spam-in-a-can)))
)
